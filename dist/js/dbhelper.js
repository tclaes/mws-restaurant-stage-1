class DBHelper{static get DATABASE_URL(){return`http://localhost:${1337}/restaurants`}static createIndexedDB(){return'indexedDB'in window?idb.open('restaurantReview',1,function(a){if(!a.objectStoreNames.contains('restaurants')){a.createObjectStore('restaurants',{keyPath:'id'})}}):null}static fetchRestaurants(a){fetch(DBHelper.DATABASE_URL).then((a)=>a.json()).then((b)=>a(null,b))}static saveRestaurantDataLocally(a){return'indexedDB'in window?DBHelper.createIndexedDB().then((b)=>{const c=b.transaction('restaurants','readwrite'),d=c.objectStore('restaurants');return Promise.all(a.map((a)=>d.put(a))).catch(()=>{throw c.abort(),Error('Events were not added to the store')})}):null}static fetchRestaurantById(a,b){DBHelper.fetchRestaurants((c,d)=>{if(c)b(c,null);else{const c=d.find((b)=>b.id==a);c?b(null,c):b('Restaurant does not exist',null)}})}static fetchRestaurantByCuisineAndNeighborhood(a,b,c){DBHelper.fetchRestaurants((d,e)=>{if(d)c(d,null);else{let d=e;'all'!=a&&(d=d.filter((b)=>b.cuisine_type==a)),'all'!=b&&(d=d.filter((a)=>a.neighborhood==b)),c(null,d)}})}static fetchNeighborhoods(a){DBHelper.fetchRestaurants((b,c)=>{if(b)a(b,null);else{const b=c.map((a,b)=>c[b].neighborhood),d=b.filter((a,c)=>b.indexOf(a)==c);a(null,d)}})}static fetchCuisines(a){DBHelper.fetchRestaurants((b,c)=>{if(b)a(b,null);else{const b=c.map((a,b)=>c[b].cuisine_type),d=b.filter((a,c)=>b.indexOf(a)==c);a(null,d)}})}static urlForRestaurant(a){return`./restaurant.html?id=${a.id}`}static imageUrlForRestaurant(a){return`/images/${a.id}`}static mapMarkerForRestaurant(a,b){const c=new google.maps.Marker({position:a.latlng,title:a.name,url:DBHelper.urlForRestaurant(a),map:b,animation:google.maps.Animation.DROP});return c}}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
