{"version":3,"sources":["../gulpfile.js"],"names":["gulp","require","sass","browserSync","create","eslint","babel","imagemin","pngquant","autoprefixer","useref","uglify","gulpIf","cssnano","cache","task","watch","reload","init","server","src","pipe","browsers","cascade","dest","stream","progressive","interlaced","presets"],"mappings":";;AAAA;;AAEA,IAAIA,OAASC,QAAQ,MAAR,CAAb;AAAA,IACIC,OAASD,QAAQ,WAAR,CADb;AAAA,IAEIE,cAAcF,QAAQ,cAAR,EAAwBG,MAAxB,EAFlB;AAAA,IAGIC,SAASJ,QAAQ,aAAR,CAHb;AAIA,IAAIK,QAAQL,QAAQ,YAAR,CAAZ;AACA,IAAIM,WAAWN,QAAQ,eAAR,CAAf;AACA,IAAIO,WAAWP,QAAQ,mBAAR,CAAf;AACA,IAAIQ,eAAeR,QAAQ,mBAAR,CAAnB;AACA,IAAIS,SAAST,QAAQ,aAAR,CAAb;AACA,IAAIU,SAASV,QAAQ,aAAR,CAAb;AACA,IAAIW,SAASX,QAAQ,SAAR,CAAb;AACA,IAAIY,UAAUZ,QAAQ,cAAR,CAAd;AACA,IAAIa,QAAQb,QAAQ,YAAR,CAAZ;;AAIAD,KAAKe,IAAL,CAAU,SAAV,EAAoB,CAAC,OAAD,CAApB,EAA+B,YAAM,CAEpC,CAFD;;AAIAf,KAAKe,IAAL,CAAU,OAAV,EAAkB,CAAC,aAAD,EAAe,YAAf,EAA4B,QAA5B,EAAqC,WAArC,EAAkD,MAAlD,CAAlB,EAA6E,YAAI;AAC7Ef,SAAKgB,KAAL,CAAW,oBAAX,EAAiC,CAAC,YAAD,CAAjC;AACAhB,SAAKgB,KAAL,CAAW,YAAX,EAAyBb,YAAYc,MAArC;AACAjB,SAAKgB,KAAL,CAAW,gBAAX,EAA6Bb,YAAYc,MAAzC;AAEH,CALD;;AAOA;AACAjB,KAAKe,IAAL,CAAU,aAAV,EAAyB,YAAU;AAC/BZ,gBAAYe,IAAZ,CAAiB;AACbC,gBAAQ;AADK,KAAjB;AAGH,CAJD;;AAMAnB,KAAKe,IAAL,CAAU,YAAV,EAAwB,YAAW;AAC/B,WAAOf,KAAKoB,GAAL,CAAS,oBAAT,EACFC,IADE,CACGnB,MADH,EAEFmB,IAFE,CAEGZ,aAAa;AACfa,kBAAU,CAAC,iBAAD,CADK;AAEfC,iBAAS;AAFM,KAAb,CAFH,EAMFF,IANE,CAMGrB,KAAKwB,IAAL,CAAU,SAAV,CANH,EAOFH,IAPE,CAOGlB,YAAYc,MAAZ,CAAmB;AACrBQ,gBAAQ;AADa,KAAnB,CAPH,CAAP;AAUH,CAXD;;AAaAzB,KAAKe,IAAL,CAAU,WAAV,EAAuB,YAAY;AAC/B,WAAOf,KAAKoB,GAAL,CAAS,sCAAT,EACFC,IADE,CACGP,MAAMP,SAAS;AACjBmB,qBAAa,IADI;AAEjBC,oBAAY;AACZ;AAHiB,KAAT,CAAN,CADH,EAMFN,IANE,CAMGrB,KAAKwB,IAAL,CAAU,aAAV,CANH,CAAP;AAOH,CARD;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAxB,KAAKe,IAAL,CAAU,QAAV,EAAoB,YAAU;AAC1B,WAAOf,KAAKoB,GAAL,CAAS,YAAT,EACFC,IADE,CACGX,QADH,EAEFW,IAFE,CAEGT,OAAO,MAAP,EAAcN,MAAM;AACtBsB,iBAASzB,YAAY,KAAZ;AADa,KAAN,CAAd,CAFH;AAKH;AALG,KAMFkB,IANE,CAMGT,OAAO,OAAP,EAAgBC,SAAhB,CANH,EAOFQ,IAPE,CAOGrB,KAAKwB,IAAL,CAAU,MAAV,CAPH,CAAP;AAQH,CATD;;AAWAxB,KAAKe,IAAL,CAAU,MAAV,EAAkB,YAAY;AAC1Bf,SAAKoB,GAAL,CAAS,WAAT,EACKC,IADL,CACUrB,KAAKwB,IAAL,CAAU,MAAV,CADV;AAEH,CAHD","file":"gulpfile.js","sourcesContent":["/* file: gulpfile.js */\r\n\r\nvar gulp   = require('gulp'),\r\n    sass   = require('gulp-sass'),\r\n    browserSync = require('browser-sync').create(),\r\n    eslint = require('gulp-eslint');\r\nvar babel = require('gulp-babel');\r\nvar imagemin = require('gulp-imagemin');\r\nvar pngquant = require('imagemin-pngquant');\r\nvar autoprefixer = require('gulp-autoprefixer');\r\nvar useref = require('gulp-useref');\r\nvar uglify = require('gulp-uglify');\r\nvar gulpIf = require('gulp-if');\r\nvar cssnano = require('gulp-cssnano');\r\nvar cache = require('gulp-cache');\r\n\r\n\r\n\r\ngulp.task('default',['watch'], () => {\r\n\r\n});\r\n\r\ngulp.task('watch',['browserSync','build-scss','useref','image-min', 'copy'], ()=>{\r\n    gulp.watch('app/scss/**/*.scss', ['build-scss']);\r\n    gulp.watch('app/*.html', browserSync.reload);\r\n    gulp.watch('app/js/**/*.js', browserSync.reload);\r\n\r\n})\r\n\r\n// Browsersync\r\ngulp.task('browserSync', function(){\r\n    browserSync.init({\r\n        server: './dist'\r\n    });\r\n})\r\n\r\ngulp.task('build-scss', function() {\r\n    return gulp.src('app/scss/**/*.scss')\r\n        .pipe(sass())\r\n        .pipe(autoprefixer({\r\n            browsers: ['last 2 versions'],\r\n            cascade: false\r\n        }))\r\n        .pipe(gulp.dest('app/css'))\r\n        .pipe(browserSync.reload({\r\n            stream: true\r\n        }));\r\n});\r\n\r\ngulp.task('image-min', function () {\r\n    return gulp.src('app/img/**/*.+(jpg|jpeg|png|gif|svg)')\r\n        .pipe(cache(imagemin({\r\n            progressive: true,\r\n            interlaced: true\r\n            //use: [pngquant()]\r\n        })))\r\n        .pipe(gulp.dest('dist/images'));\r\n});\r\n\r\n// gulp.task('lint', () => {\r\n//     // ESLint ignores files with \"node_modules\" paths.\r\n//     // So, it's best to have gulp ignore the directory as well.\r\n//     // Also, Be sure to return the stream from the task;\r\n//     // Otherwise, the task may end before the stream has finished.\r\n//     return gulp.src(['js/**/*.js','!node_modules/**'])\r\n//     // eslint() attaches the lint output to the \"eslint\" property\r\n//     // of the file object so it can be used by other modules.\r\n//         .pipe(eslint())\r\n//         // eslint.format() outputs the lint results to the console.\r\n//         // Alternatively use eslint.formatEach() (see Docs).\r\n//         .pipe(eslint.format())\r\n//         // To have the process exit with an error code (1) on\r\n//         // lint error, return the stream and pipe to failAfterError last.\r\n//         .pipe(eslint.failAfterError());\r\n// });\r\n\r\ngulp.task('useref', function(){\r\n    return gulp.src('app/*.html')\r\n        .pipe(useref())\r\n        .pipe(gulpIf('*.js',babel({\r\n            presets: browserSync['env']\r\n        })))\r\n        //.pipe(gulpIf('*.js', uglify()))\r\n        .pipe(gulpIf('*.css', cssnano()))\r\n        .pipe(gulp.dest('dist'))\r\n});\r\n\r\ngulp.task('copy', function () {\r\n    gulp.src('app/sw.js')\r\n        .pipe(gulp.dest('dist'));\r\n});\r\n\r\n\r\n\r\n"]}