{"version":3,"sources":["../../js/main.min.js"],"names":["DBHelper","callback","fetch","DATABASE_URL","then","response","json","restaurants","id","fetchRestaurants","error","restaurant","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","marker","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","port","markers","document","addEventListener","fetchNeighborhoods","fetchCuisines","console","self","fillNeighborhoodsHTML","select","getElementById","forEach","option","createElement","innerHTML","value","append","fillCuisinesHTML","window","initMap","loc","lat","lng","Map","zoom","center","scrollwheel","addListener","setMapTitle","updateRestaurants","mapFrame","querySelector","setAttribute","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","ul","m","setMap","createRestaurantHTML","addMarkersToMap","li","picture","source","className","srcset","imageUrlForRestaurant","image","alt","address","more","href","mapMarkerForRestaurant","event","location","push"],"mappings":"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","file":"main.min.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\nclass DBHelper {\n\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\n  static get DATABASE_URL() {\n    const port = 1337; // Change this to your server port\n    return `http://localhost:${port}/restaurants`;\n  }\n\n  /**\r\n   * Fetch all restaurants.\r\n   */\n  static fetchRestaurants(callback) {\n    fetch(DBHelper.DATABASE_URL).then(response => response.json()).then(restaurants => callback(null, restaurants));\n  }\n\n  /**\r\n   * Fetch a restaurant by its ID.\r\n   */\n  static fetchRestaurantById(id, callback) {\n    // fetch all restaurants with proper error handling.\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        const restaurant = restaurants.find(r => r.id === id);\n        if (restaurant) {\n          // Got the restaurant\n          callback(null, restaurant);\n        } else {\n          // Restaurant does not exist in the database\n          callback('Restaurant does not exist', null);\n        }\n      }\n    });\n  }\n\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\n  static fetchRestaurantByCuisine(cuisine, callback) {\n    // Fetch all restaurants  with proper error handling\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given cuisine type\n        const results = restaurants.filter(r => r.cuisine_type == cuisine);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\n  static fetchRestaurantByNeighborhood(neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Filter restaurants to have only given neighborhood\n        const results = restaurants.filter(r => r.neighborhood == neighborhood);\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        let results = restaurants;\n        if (cuisine != 'all') {\n          // filter by cuisine\n          results = results.filter(r => r.cuisine_type == cuisine);\n        }\n        if (neighborhood != 'all') {\n          // filter by neighborhood\n          results = results.filter(r => r.neighborhood == neighborhood);\n        }\n        callback(null, results);\n      }\n    });\n  }\n\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\n  static fetchNeighborhoods(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all neighborhoods from all restaurants\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\n        // Remove duplicates from neighborhoods\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i);\n        callback(null, uniqueNeighborhoods);\n      }\n    });\n  }\n\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\n  static fetchCuisines(callback) {\n    // Fetch all restaurants\n    DBHelper.fetchRestaurants((error, restaurants) => {\n      if (error) {\n        callback(error, null);\n      } else {\n        // Get all cuisines from all restaurants\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\n        // Remove duplicates from cuisines\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i);\n        callback(null, uniqueCuisines);\n      }\n    });\n  }\n\n  /**\r\n   * Restaurant page URL.\r\n   */\n  static urlForRestaurant(restaurant) {\n    return `./restaurant.html?id=${restaurant.id}`;\n  }\n\n  /**\r\n   * Restaurant image URL.\r\n   */\n  static imageUrlForRestaurant(restaurant) {\n    return `/images/${restaurant.id}.jpg`;\n  }\n\n  /**\r\n   * Map marker for a restaurant.\r\n   */\n  static mapMarkerForRestaurant(restaurant, map) {\n    const marker = new google.maps.Marker({\n      position: restaurant.latlng,\n      title: restaurant.name,\n      url: DBHelper.urlForRestaurant(restaurant),\n      map: map,\n      animation: google.maps.Animation.DROP });\n    return marker;\n  }\n\n}\n\nlet restaurants, neighborhoods, cuisines;\nlet map;\nvar markers = [];\n\n/**\r\n * Register serviceworker\r\n */\n\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\ndocument.addEventListener('DOMContentLoaded', event => {\n  fetchNeighborhoods();\n  fetchCuisines();\n});\n\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\nfetchNeighborhoods = () => {\n  DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n    if (error) {\n      // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n};\n\n/**\r\n * Set neighborhoods HTML.\r\n */\nfillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n  const select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach(neighborhood => {\n    const option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n};\n\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\nfetchCuisines = () => {\n  DBHelper.fetchCuisines((error, cuisines) => {\n    if (error) {\n      // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n};\n\n/**\r\n * Set cuisines HTML.\r\n */\nfillCuisinesHTML = (cuisines = self.cuisines) => {\n  const select = document.getElementById('cuisines-select');\n\n  cuisines.forEach(cuisine => {\n    const option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\r\n * Initialize Google map, called from HTML.\r\n */\nwindow.initMap = () => {\n  let loc = {\n    lat: 40.722216,\n    lng: -73.987501\n  };\n  self.map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 12,\n    center: loc,\n    scrollwheel: false\n  });\n  self.map.addListener('tilesloaded', setMapTitle);\n  updateRestaurants();\n};\n\nsetMapTitle = () => {\n  const mapFrame = document.querySelector('#map').querySelector('iframe');\n  mapFrame.setAttribute('title', 'Google maps with restaurant location');\n};\n\n/**\r\n * Update page and map for current restaurants.\r\n */\nupdateRestaurants = () => {\n  const cSelect = document.getElementById('cuisines-select');\n  const nSelect = document.getElementById('neighborhoods-select');\n\n  const cIndex = cSelect.selectedIndex;\n  const nIndex = nSelect.selectedIndex;\n\n  const cuisine = cSelect[cIndex].value;\n  const neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\n    if (error) {\n      // Got an error!\n      console.error(error);\n    } else {\n      resetRestaurants(restaurants);\n      fillRestaurantsHTML();\n    }\n  });\n};\n\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\nresetRestaurants = restaurants => {\n  // Remove all restaurants\n  self.restaurants = [];\n  const ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  self.markers.forEach(m => m.setMap(null));\n  self.markers = [];\n  self.restaurants = restaurants;\n};\n\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\nfillRestaurantsHTML = (restaurants = self.restaurants) => {\n  const ul = document.getElementById('restaurants-list');\n  restaurants.forEach(restaurant => {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  addMarkersToMap();\n};\n\n/**\r\n * Create restaurant HTML.\r\n */\ncreateRestaurantHTML = restaurant => {\n  const li = document.createElement('li');\n\n  const picture = document.createElement('picture');\n\n  const source = document.createElement('source');\n  source.className = 'restaurant-img';\n  source.srcset = DBHelper.imageUrlForRestaurant(restaurant);\n  picture.append(source);\n\n  const image = document.createElement('img');\n  image.className = 'restaurant-img';\n  image.srcset = DBHelper.imageUrlForRestaurant(restaurant);\n  // image.srcset = DBHelper.imageSrcsetForRestaurant(restaurant);\n  image.alt = \"An image of restaurant \" + restaurant.name + \" in \" + restaurant.neighborhood;\n  picture.append(image);\n\n  li.append(picture);\n\n  const name = document.createElement('h2');\n  name.innerHTML = restaurant.name;\n  li.append(name);\n\n  const neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  li.append(neighborhood);\n\n  const address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  li.append(address);\n\n  const more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  li.append(more);\n\n  return li;\n};\n\n/**\r\n * Add markers for current restaurants to the map.\r\n */\naddMarkersToMap = (restaurants = self.restaurants) => {\n  restaurants.forEach(restaurant => {\n    // Add marker to the map\n    const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\n    google.maps.event.addListener(marker, 'click', () => {\n      window.location.href = marker.url;\n    });\n    self.markers.push(marker);\n  });\n};"]}